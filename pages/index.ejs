<html lang="en">
<head>
    <title>ChatStats</title>
    <meta charset="UTF-8">
    <style type="text/css">
        #charts {
            width: 1024px;
            margin: auto;
        }
        div[id^="chart-"] {
            margin: 30px 0px;
        }
    </style>
</head>
<body>
    <div id="charts"></div>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      const stats = JSON.parse('<%- JSON.stringify(stats) %>');
      const messageCounts = getMessageCountGrouped();

      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawCharts);

      function drawCharts() {
        Object.keys(messageCounts).forEach(yearStr => {
          const container = document.createElement('div');
          container.id = `chart-${yearStr}`;
          document.getElementById('charts').append(container);
          drawChartForYear(yearStr);
        })
      }

      function drawChartForYear(yearStr) {
        const dataTable = mapChartDataForYear(yearStr);
        const options = {
          title: `Messages Per Week (${yearStr})`,
          width: 1024,
          height: 300,
          tooltip: {
            isHtml: true,
          }
        };
        const chart = new google.visualization.LineChart(document.getElementById(`chart-${yearStr}`));
        chart.draw(dataTable, options);
      }

      function mapChartDataForYear(yearStr) {
        const yearData = messageCounts[yearStr];

        const dataTable = new google.visualization.DataTable();
        dataTable.addColumn('number', 'Week Number');
        stats.authors.forEach(author => {
          dataTable.addColumn('number', `By ${author.name}`);
        });
        dataTable.addColumn('number', 'Total');
        dataTable.addColumn({type: 'string', role: 'tooltip', p: { html: true }});
        dataTable.addColumn({type: 'string', role: 'annotation'});
        let started = true;
        const dataRows = [];
        Object.keys(yearData).forEach(weekNumberStr => {
          const weekData = yearData[weekNumberStr];
          started = started || weekData.count > 0;
          if (started) {
            const row = [
              Number(weekNumberStr),
            ];
            stats.authors.forEach(author => row.push(weekData.perAuthor[`${author.id}`]));
            const tooltip = `
              <div style="padding: 15px; font-family: Arial; font-size: 14px">
                Messages: <strong>${weekData.count}</strong><br /><br />
                From: ${sqlDateToReadable(weekData.dates[0])}<br />
                To: ${sqlDateToReadable(weekData.dates[weekData.dates.length - 1])}
              </div>`;
            row.push(weekData.count, tooltip, weekData.comments.join('. ') || null);
            dataRows.push(row);
          }
        });
        dataTable.addRows(dataRows);
        return dataTable;
      }

      function getMessageCountGrouped() {
        const firstYear = Number(stats.dates[0].split('-')[0]);
        const lastYear = Number(stats.dates[stats.dates.length - 1].split('-')[0]);
        const statsByYear = {};
        for (let year = firstYear; year <= lastYear; year += 1) {
          statsByYear[year] = {};
          for (let month = 1; month <= 12; month += 1) {
            const daysInMonth = getDaysInMonth(year, month);
            for (let day = 1; day <= daysInMonth; day += 1) {
              const weekOfYear = getWeekOfYear(new Date(year, month - 1, day));
              const weekOfYearStr = `${weekOfYear}`;
              if (!(weekOfYearStr in statsByYear[year])) {
                statsByYear[year][weekOfYearStr] = {
                  count: 0,
                  dates: [],
                  perAuthor: {},
                  comments: [],
                };
                stats.authors.forEach(author => {
                  statsByYear[year][weekOfYearStr].perAuthor[`${author.id}`] = 0;
                });
              }
              const weekStats = statsByYear[year][weekOfYearStr];
              const sqlDate = dateToSql(year, month, day);
              const dateStat = stats.messagesPerDate[sqlDate];
              weekStats.dates.push(sqlDate);
              if (sqlDate in stats.events) {
                statsByYear[year][weekOfYearStr].comments.push(stats.events[sqlDate]);
              }
              if (dateStat) {
                weekStats.count += dateStat.messageCount;
                stats.authors.forEach(author => {
                  weekStats.perAuthor[`${author.id}`] += dateStat.messagesPerAuthor[`${author.id}`] || 0;
                });
              }
            }
          }
        }
        return statsByYear;
      }

      function getWeekOfYear(date) {
        const oneJan = new Date(date.getFullYear(), 0, 1);
        return Math.ceil((((date - oneJan) / 86400000) + oneJan.getDay() + 1) / 7);
      }

      function getDaysInMonth(year, month) {
        return new Date(year, month, 0).getDate();
      }

      function dateToSql(year, month, day) {
        function addZeros(number) {
          let result = "";
          if (number < 10) {
            result += "0";
          }
          result += `${number}`;
          return result;
        }
        return `${Number(year)}-${addZeros(Number(month))}-${addZeros(Number(day))}`;
      }

      function sqlDateToReadable(sqlDate, includeYear) {
        const [yearStr, monthStr, dayStr] = sqlDate.split("-");
        const monthMap = {
          "01": "January",
          "02": "February",
          "03": "March",
          "04": "April",
          "05": "May",
          "06": "June",
          "07": "July",
          "08": "August",
          "09": "September",
          "10": "October",
          "11": "November",
          "12": "December",
        };
        const monthReadable = monthMap[monthStr];
        if (monthReadable) {
          return `${monthReadable} ${dayStr}${includeYear ? `, ${yearStr}` : ''}`;
        }
        return `${monthStr}/${dayStr}${includeYear ? `/${yearStr}` : ''}`;
      }
    </script>
</body>
</html>
